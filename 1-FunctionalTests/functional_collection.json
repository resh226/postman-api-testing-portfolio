{
	"info": {
		"_postman_id": "844a8a21-4123-444e-bb9a-38c0587d0e11",
		"name": "1.Functional Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39256038"
	},
	"item": [
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "1. POST Login – Valid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validating Status code is 200.\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Validating the response time is less than 3000ms.\r",
									"pm.test(\"Response time is less than 8000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
									"});\r",
									"//Setting the token in environment variable.\r",
									"const jsonData = pm.response.json();\r",
									"pm.environment.set(\"token\",jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"roshinimathew@fake.com\",\r\n    \"password\":\"roshini\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/users/login",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. GET Contact – Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validating Status code and Content-Type\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. POST Add Contact – Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validating the status code of the response. It should be 201.\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Setting the environment variable \"contactId\" to value of \"_id\" field in the response body.\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"contactId\",jsonData._id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{secondName}}\",\r\n    \"birthdate\": \"{{birthdate}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"street1\": \"{{street1}}\",\r\n    \"street2\": \"{{street2}}\",\r\n    \"city\": \"{{city}}\",\r\n    \"stateProvince\": \"{{stateProvince}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"country\": \"{{country}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. GET Contact – By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Response Status Code and Content\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Right Email/Contact is returned\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"martin@fake.com\");\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Correct first name is returned\", function () {\r",
									"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"firstName\"));\r",
									"});\r",
									"pm.test(\"Correct last name is returned\", function () {\r",
									"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"secondName\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactId}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. PUT Contact – Valid Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status code is 200.\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Juhi\",\r\n    \"lastName\": \"Sunny\",\r\n    \"birthdate\": \"1990-01-01\",\r\n    \"email\": \"juhi@fake.com\",\r\n    \"phone\": \"8905555555\",\r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment B\",\r\n    \"city\": \"Anytown\",\r\n    \"stateProvince\": \"KS\",\r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"USA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactId}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. DEL Contact – Valid Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate that the status code is 200.\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactId}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "POST Add Contact – Prerequisite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate the status code is 201.\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Setting the environment variable \"contactId\" to the response body's _id field.\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"contactId\",jsonData._id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{secondName}}\",\r\n    \"birthdate\": \"{{birthdate}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"street1\": \"{{street1}}\",\r\n    \"street2\": \"{{street2}}\",\r\n    \"city\": \"{{city}}\",\r\n    \"stateProvince\": \"{{stateProvince}}\",\r\n    \"postalCode\": \"{{postalCode}}\",\r\n    \"country\": \"{{country}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "1. GET Contact List-Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code and Response Body for Authentication Error\r",
									"pm.test(\"Staus code is 401\",function(){\r",
									"    pm.response.to.have.status(401)\r",
									"});\r",
									"pm.test(\"Authentication error message is displayed successfully\", function () {\r",
									"    pm.response.to.have.body({\r",
									"        error: \"Please authenticate.\"\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. GET Contact-Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate that the status code is 404.\r",
									"pm.test(\"Status code is 404\",function(){\r",
									"    pm.response.to.have.status(404)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/884058f3ddda5e0015a905c0",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"884058f3ddda5e0015a905c0"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. POST Add Contact- Missing Requirement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate that the response status is 400\r",
									"pm.test(\"Status is 400\", function(){\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"//validate that the response body contains the error message\r",
									"pm.test(\"Missing requirement error is displayed successfully\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"`firstName` is required.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"Sunny\",\r\n    \"birthdate\": \"1990-01-01\",\r\n    \"email\": \"martin@fake.com\",\r\n    \"phone\": \"8905555555\",\r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment B\",\r\n    \"city\": \"Anytown\",\r\n    \"stateProvince\": \"KS\",\r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"USA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. POST Add Contact-Last Name too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate response status code is 400\r",
									"pm.test(\"Status is 400\", function(){\r",
									"    pm.response.to.have.status(400)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Martin\",\r\n    \"lastName\": \"Sunnyhjyfghjkiugfdser\",\r\n    \"birthdate\": \"1990-01-01\",\r\n    \"email\": \"martin@fake.com\",\r\n    \"phone\": \"8905555555\",\r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment B\",\r\n    \"city\": \"Anytown\",\r\n    \"stateProvince\": \"KS\",\r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"USA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. POST Add Contact- Invalid birthdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate that the response status is 400\r",
									"pm.test(\"Status is 400\", function(){\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"//Validate error message is displayed for invalid birthdate\r",
									"pm.test(\"Invalid Birthdate error is displayed successfully.\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Birthdate is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Martin\",\r\n    \"lastName\": \"gfdser\",\r\n    \"birthdate\": \"-01-01\",\r\n    \"email\": \"martin@fake.com\",\r\n    \"phone\": \"8905555555\",\r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment B\",\r\n    \"city\": \"Anytown\",\r\n    \"stateProvince\": \"KS\",\r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"USA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. PUT Update Contact-Invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate that the response status is 400.\r",
									"pm.test(\"Status is 400\", function(){\r",
									"    pm.response.to.have.status(400)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Juhi\",\r\n    \"lastName\": \"Sunny\",\r\n    \"birthdate\": \"1990-01-01\",\r\n    \"email\": \"juhi@fake\",\r\n    \"phone\": \"8905555555\",\r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment B\",\r\n    \"city\": \"Anytown\",\r\n    \"stateProvince\": \"KS\",\r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"USA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactId}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Contact – Cleanup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate the status code is 200.\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactId}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "btoken",
			"value": ""
		}
	]
}